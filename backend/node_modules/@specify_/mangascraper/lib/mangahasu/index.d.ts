import { MangaCallback, Manga, MangaSearch, MangaFilters, MangahasuGenres, MangaMeta, MangaRating, MangaChapters, ScrapingOptions, MangaStatus, MangaGenre, MangaType, LatestHotManga } from '..';
export interface MangahasuManga {
    title: string;
    url: string;
    coverImage: string;
}
export declare type MangahasuMeta = {
    title: {
        main: string;
        alt: string[];
    };
    summary: string;
    authors: string[];
    artists: string[];
    genres: MangaGenre<Mangahasu>[];
    type: string;
    status: string;
    views: string;
    rating: MangaRating;
    coverImage: string;
    chapters: MangaChapters<Mangahasu>[];
};
export interface MangahasuOptions {
    genres?: {
        include?: MangaGenre<Mangahasu>[];
        exclude?: MangaGenre<Mangahasu>[];
    };
    status?: MangaStatus<Mangahasu> | 'any';
    type?: MangaType<Mangahasu> | 'any';
    page?: number;
}
export interface MangahasuLatestHotManga {
    title: string;
    url: string;
    coverImage: string;
}
export declare type MangahasuGenre = keyof typeof MangahasuGenres;
export default class Mangahasu {
    private options;
    constructor(options?: ScrapingOptions);
    /**
     *
     * @param query - Search manga, name of author and artist. If you only want to search for a specific characteristic of a manga (such as searching for author name only), use an object which has the fields `author`, `artist`, and `title`
     * @param filters - Filters to apply when searching up the manga such as including/excluding genres or newest releases.
     * @param callback - Callback function
     * @returns Returns an array of manga from mangahasu
     * @example
     * ```js
     * import { Mangahasu } from "@specify_/mangascraper";
     * const mangahasu = new Mangahasu();
     *
     * (await () => {
     *  const mangas = await mangahasu.search({ title: "One Piece", author: "Oda" }, { genres: { include: ["Action", "Adventure"], exclude: ["Mystery"]}, status: "ongoing" })
     * console.log(mangas); // Output: [ { title: 'One Piece - Digital Colored Comics' ... }]
     * })();
     * ```
     */
    search(query?: MangaSearch<Mangahasu>, filters?: MangaFilters<Mangahasu>, callback?: MangaCallback<Manga<Mangahasu>[]>): Promise<Manga<Mangahasu>[]>;
    /**
     * Get metadata of a manga from its url
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns the metadata of a manga from the given url
     * @example
     * ```js
     * import { Mangahasu } from "@specify_/mangascraper";
     * const mangahasu = new Mangahasu();
     *
     * (async () => {
     *  const one_piece = await mangahasu.getMangaMeta('https://mangahasu.se/one-piece-p10328.html');
     *  console.log(one_piece); // Output: { title: { main: "One Piece", alt: ["ワンピース", ... ] }, ... }
     * })();
     * ```
     */
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<Mangahasu>>): Promise<MangaMeta<Mangahasu>>;
    /**
     * Get a list of mangas from Mangahasu's latest releases
     *
     * @param options - Options to provide when getting latest updates
     * @param callback - Callback function
     * @returns Returns an array of mangas from Mangahasu's latest releases page.
     */
    getLatestUpdates(options?: {
        page: number;
    }, callback?: MangaCallback<LatestHotManga<Mangahasu>[]>): Promise<LatestHotManga<Mangahasu>[]>;
    /**
     * Get raw image URLs from chapter URL.
     * Note: Each image URL does not require any `headers` when making requests
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns an array of URLs of each page in the chapter
     * @example
     * ```js
     * import { Mangahasu } from "@specify_/mangascraper";
     * const mangahasu = new Mangahasu();
     *
     * (async () => {
     *  const pages = mangahasu.getPages("https://mangahasu.se/solo-leveling/chapter-0-prologue-v1-c628457.html");
     *  console.log(pages); // Output: [ 'https://.../0000-001.png', 'https://.../0000-002.png', 'https://.../0000-003.png', ... ]
     * })();
     * ```
     */
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
//# sourceMappingURL=index.d.ts.map