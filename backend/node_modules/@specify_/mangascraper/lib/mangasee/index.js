"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const automateBrowser_1 = __importDefault(require("../functions/automateBrowser"));
const success_1 = __importDefault(require("../functions/success"));
const failure_1 = __importDefault(require("../functions/failure"));
class MangaSee {
    constructor(options = {}) {
        this.BLOCKED_DOMAINS = [
            'https://static.cloudflareinsights.com/beacon.min.js',
            'https://www.googletagmanager.com/',
            'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/',
            'https://cdnjs.cloudflare.com/ajax/libs/popper.js/',
            'https://www.google.com/',
        ];
        this.options = options;
    }
    /**
     * Search up a manga from MangaSee
     *
     * @param query - Title of manga. Leave it at null if you don't want to search for a specific title. This parameter accepts either a `string` or `object` containing either or both `title` and `author`
     * @param filters  - Filters to apply when searching for manga
     * @param callback - Callback function
     * @returns Returns an array of mangas from mangasee123.com
     * @example
     * ```js
     * await mangasee.search('chainsaw man');
     * ```
     *
     * @example
     * ```js
     * await mangasee.search({ author: 'Fujimoto Tatsuki' });
     * ```
     *
     * @example
     * ```js
     * await mangasee.search(null, {
     *    genre: { include: ['Fantasy'], exclude: ['Seinen'] },
     *    status: { scan: 'ongoing', publish: 'ongoing' },
     *    orderBy: 'popularity(all_time)',
     *    orderType: 'ascending',
     *    type: 'manga',
     * });
     * ```
     */
    search(query = '', filters = {}, callback = () => void 0) {
        if (query == null)
            query = '';
        if (filters == null)
            filters = {};
        const { orderBy = 'A-Z', orderType = 'descending', translationGroup = 'any', status = { scan: 'any', publish: 'any' }, type: mangaType = 'any', genres = { include: [], exclude: [] }, } = filters;
        function generateURL() {
            const parsedQuery = (() => {
                // Is the query a string? If so, just return it as a URI component
                if (typeof query === 'string')
                    return `name=${encodeURIComponent(query)}`;
                /**
                 * If the query is not a string, extract `title` and `author`
                 * and then return the data as a URI component
                 *
                 * ex: &name=title&author=author
                 */
                const params = [];
                if ('author' in query && query.author != null)
                    params.push(`author=${encodeURIComponent(query.author)}`);
                if ('title' in query && query.title != null)
                    params.push(`name=${encodeURIComponent(query.title)}`);
                return params.join('&');
            })();
            const sort = `sort=${__1.MangaSeeOrderBy[orderBy]}`;
            const desc = (() => {
                if (orderBy === 'popularity(all_time)' || orderBy === 'popularity(monthly)')
                    return `desc=${orderType !== 'descending'}`;
                return `desc=${orderType !== 'ascending'}`;
            })();
            const type = mangaType === 'any' ? '' : `type=${mangaType}`;
            const trGroup = translationGroup === 'any' ? '' : `official=yes`;
            const scanStatus = status.scan == null || status.scan === 'any'
                ? ''
                : `status=${status.scan === 'paused' ? 'hiatus' : status.scan}`;
            const publishedStatus = status.publish == null || status.publish === 'any'
                ? ''
                : `pstatus=${status.publish === 'paused' ? 'hiatus' : status.publish}`;
            const includeGenres = genres.include == null || genres.include.length === 0 ? `` : `genre=${genres.include.join(',')}`;
            const excludeGenres = genres.exclude == null || genres.exclude.length === 0 ? `` : `genreNo=${genres.exclude.join(',')}`;
            const urlParams = [
                parsedQuery,
                sort,
                desc,
                type,
                trGroup,
                scanStatus,
                publishedStatus,
                includeGenres,
                excludeGenres,
            ]
                .filter((param) => param.length !== 0)
                .join('&');
            return `https://mangasee123.com/search/?${urlParams}`;
        }
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto('https://mangasee123.com/search', { waitUntil: 'domcontentloaded' });
                    yield page.waitForFunction('window.angular.element(document.body).scope().vm.Directory');
                    return yield page.evaluate(() => {
                        const { angular } = window;
                        const $state = angular.element(document.body).scope();
                        return $state.vm.Directory;
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['document', 'script'],
                    },
                });
                function convertToAngularStatus(status) {
                    switch (status) {
                        case 'cancelled':
                            return 'Cancelled';
                        case 'completed':
                            return 'Complete';
                        case 'discontinued':
                            return 'Discontinued';
                        case 'ongoing':
                            return 'Ongoing';
                        case 'paused':
                            return 'Hiatus';
                        case 'any':
                        default:
                            return null;
                    }
                }
                const $translationGroup = (() => {
                    switch (translationGroup) {
                        case 'any':
                        default:
                            return null;
                        case 'official':
                            return 'yes';
                    }
                })();
                const $scanStatus = convertToAngularStatus(status.scan);
                const $publishStatus = convertToAngularStatus(status.publish);
                const $type = (() => {
                    switch (mangaType) {
                        case 'doujinshi':
                            return 'Doujinshi';
                        case 'manga':
                            return 'Manga';
                        case 'manhua':
                            return 'Manhua';
                        case 'manhwa':
                            return 'Manhwa';
                        case 'any':
                        default:
                            return null;
                    }
                })();
                function filterQuery(manga) {
                    if (query == null)
                        return true;
                    if (typeof query === 'string')
                        return manga.s.toLowerCase().includes(query.toLowerCase().trim());
                    const queryFilters = [];
                    if ('title' in query && query.title)
                        queryFilters.push(manga.s.toLowerCase().includes(query.title.toLowerCase().trim()));
                    if ('author' in query && query.author) {
                        const { author } = query;
                        queryFilters.push(manga.a.some((mangaka) => mangaka.toLowerCase().includes(author.toLowerCase().trim())));
                    }
                    return queryFilters.every((boolean) => boolean === true);
                }
                function hasGenres(manga) {
                    const { include } = genres;
                    if (include == null)
                        return true;
                    const mangaGenres = manga.g.map((genre) => include.indexOf(genre) !== -1);
                    return mangaGenres.filter((validGenre) => validGenre).length === include.length;
                }
                function convertStatusToMatchMangaType(status) {
                    switch (status) {
                        case 'Cancelled':
                            return 'cancelled';
                        case 'Complete':
                            return 'completed';
                        case 'Discontinued':
                            return 'discontinued';
                        case 'Hiatus':
                            return 'paused';
                        case 'Ongoing':
                            return 'ongoing';
                    }
                }
                const filteredArray = data.filter((manga) => filterQuery(manga) &&
                    hasGenres(manga) &&
                    (genres.exclude && genres.exclude.length > 0
                        ? manga.g.every((genre) => { var _a; return (_a = genres.exclude) === null || _a === void 0 ? void 0 : _a.every((genreExcluded) => genreExcluded !== genre); })
                        : true) &&
                    ($scanStatus ? manga.ss === $scanStatus : true) &&
                    ($publishStatus ? manga.ps === $publishStatus : true) &&
                    ($type ? manga.t === $type : true) &&
                    ($translationGroup ? manga.o === $translationGroup : true));
                function arrangeFilteredArray(array) {
                    switch (orderBy) {
                        case 'A-Z':
                            return orderType === 'descending' ? array.sort() : array.sort().reverse();
                        case 'latest_updates':
                            return orderType === 'descending'
                                ? array.sort((a, b) => {
                                    const parsedA = Date.parse(a.ls);
                                    const parsedB = Date.parse(b.ls);
                                    return parsedB - parsedA;
                                })
                                : array.sort((a, b) => {
                                    const parsedA = Date.parse(a.ls);
                                    const parsedB = Date.parse(b.ls);
                                    return parsedA - parsedB;
                                });
                        case 'popularity(all_time)':
                            return orderType === 'descending'
                                ? array.sort((a, b) => {
                                    return Number(b.v) - Number(a.v);
                                })
                                : array.sort((a, b) => {
                                    return Number(a.v) - Number(b.v);
                                });
                        case 'popularity(monthly)':
                            return orderType === 'descending'
                                ? array.sort((a, b) => {
                                    return Number(b.vm) - Number(a.vm);
                                })
                                : array.sort((a, b) => {
                                    return Number(a.vm) - Number(b.vm);
                                });
                        case 'year_released':
                            return orderType === 'ascending'
                                ? array.sort((a, b) => {
                                    return Number(a.y) - Number(b.y);
                                })
                                : array
                                    .sort((a, b) => {
                                    return Number(a.y) - Number(b.y);
                                })
                                    .reverse();
                    }
                }
                // const html = await automateBrowser(
                //   this.options,
                //   async (page) => {
                //     await page.goto(generateURL(), { waitUntil: 'domcontentloaded' });
                //     await page.addScriptTag({ path: require.resolve('jquery') });
                //     await page.waitForSelector('a.SeriesName.ng-binding, div.NoResults', { hidden: false, visible: true });
                //     return await page.evaluate(() => document.documentElement.innerHTML);
                //   },
                //   {
                //     domains: {
                //       method: 'block',
                //       value: this.BLOCKED_DOMAINS,
                //     },
                //     resource: {
                //       method: 'unblock',
                //       type: ['document', 'script'],
                //     },
                //   },
                // );
                // const $ = cheerio.load(html);
                // if ($('div.NoResults').length === 1) return success([], callback, res);
                // let memo: string[] = [];
                // // Get title + manga URL
                // const titlesURL = $(`a.SeriesName.ng-binding`)
                //   .map((_, el) => {
                //     const anchorEl = $(el);
                //     const title = anchorEl.text();
                //     const url = anchorEl.attr('href') || '';
                //     return { title, url: `https://mangasee123.com${url}` };
                //   })
                //   .get();
                // // Get manga authors
                // const authors: string[][] = [];
                // $('div[ng-if="vm.FullDisplay"]:contains("Author") > span').each((_, el) => {
                //   const author = $(el).text().trim();
                //   if (author.endsWith(',')) {
                //     memo = [...memo, author.slice(0, author.length - 1)];
                //     return;
                //   }
                //   if (!author.endsWith(',')) {
                //     const currentMemo = [...memo, author];
                //     memo = [];
                //     authors.push(currentMemo);
                //   }
                // });
                // // Get manga statuses
                // const statuses = $('div[ng-if="vm.FullDisplay"]:contains("Status") > a')
                //   .map((_, el) => $(el).text().trim())
                //   .get()
                //   .reduce<{ scan?: string; publish?: string }[]>((acc, cV, cI, arr) => {
                //     const object = arr.slice(cI, cI + 2).map((text) => {
                //       if (text.endsWith('(Scan)'))
                //         return { scan: text.replace(' (Scan)', '').replace('Hiatus', 'Paused').toLowerCase() };
                //       return { publish: text.replace(' (Publish)', '').replace('Hiatus', 'Paused').toLowerCase() };
                //     });
                //     if (cI % 2 === 0) acc.push(Object.assign(object[0], object[1]));
                //     return acc;
                //   }, []);
                // // Get manga updated time
                // const updatedAt = $('div[ng-if="vm.FullDisplay"]:contains("Latest") > span')
                //   .text()
                //   .trim()
                //   .slice(2)
                //   .split('· ')
                //   .map((date) => new Date(date));
                // // Get manga genres
                // const genres: string[][] = [];
                // $('div.col-md-10.col-8 > div:contains("Genres") > span').each((_, el) => {
                //   const mangaGenre = $(el).text().trim();
                //   if (mangaGenre.endsWith(',')) {
                //     memo = [...memo, mangaGenre.slice(0, mangaGenre.length - 1)];
                //     return;
                //   }
                //   if (!mangaGenre.endsWith(',')) {
                //     const currentMemo = [...memo, mangaGenre];
                //     memo = [];
                //     genres.push(currentMemo);
                //   }
                // });
                // const img = $(`a.SeriesName > img`)
                //   .map((_, el) => {
                //     const src = $(el).attr('src');
                //     if (src != null) return src;
                //   })
                //   .get();
                // const data = titlesURL.map(({ title, url }, i) => ({
                //   title,
                //   url,
                //   coverImage: img[i],
                //   status: {
                //     scan: statuses[i].scan as MangaStatus<MangaSee>,
                //     publish: statuses[i].publish as MangaStatus<MangaSee>,
                //   },
                //   genres: genres[i] as (keyof typeof MangaSeeGenres)[],
                //   updatedAt: updatedAt[i],
                // }));
                success_1.default(arrangeFilteredArray(filteredArray).map((manga) => ({
                    title: manga.s,
                    coverImage: `https://cover.nep.li/cover/${manga.i}.jpg`,
                    url: `https://mangasee123.com/manga/${manga.i}`,
                    genres: manga.g,
                    status: {
                        scan: convertStatusToMatchMangaType(manga.ss),
                        publish: convertStatusToMatchMangaType(manga.ps),
                    },
                    updatedAt: new Date(manga.ls),
                })), callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     *  Get all mangas from the MangaSee directory. This can take 5-10 seconds to process since this is returning 5,000+ mangas.
     *
     * @param callback - Callback function
     * @returns Returns an array of every manga from the MangaSee directory
     * @example
     * ```js
     * const mangas = await mangasee.directory();
     * ```
     */
    directory(callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto('https://mangasee123.com/directory/', { waitUntil: 'domcontentloaded' });
                    yield page.waitForFunction('window.angular.element(document.body).scope()');
                    return yield page.evaluate(() => {
                        const { angular } = window;
                        const { FullDirectory } = angular.element(document.body).scope().vm;
                        return FullDirectory;
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['document', 'script'],
                    },
                });
                const formattedDirectoryData = data.Directory.map((manga) => {
                    const status = (() => {
                        switch (manga.st) {
                            case 'Complete':
                                return 'completed';
                            case 'Hiatus':
                                return 'paused';
                            case 'Ongoing':
                            default:
                                return 'ongoing';
                            case 'Discontinued':
                                return 'discontinued';
                            case 'Cancelled':
                                return 'cancelled';
                        }
                    })();
                    return {
                        title: manga.s,
                        url: `https://mangasee123.com/manga/${manga.i}`,
                        coverImage: `https://cover.nep.li/cover/${manga.i}.jpg`,
                        genres: manga.g.map((genre) => data.AllGenres[genre]),
                        status,
                    };
                });
                success_1.default(formattedDirectoryData, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get a list of mangas that have been recently updated from MangaSee
     *
     * @param callback - Callback function
     * @returns Returns an array of mangas in the latest chapters section in MangaSee's homepage.
     * @example
     *
     * ```js
     * await mangasee.getLatestUpdates();
     * ```
     */
    getLatestUpdates(callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            try {
                const json = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto('https://mangasee123.com/', { waitUntil: 'domcontentloaded' });
                    yield page.waitForFunction('window.angular.element(document.body).scope()');
                    return yield page.evaluate(() => {
                        const { angular } = window;
                        return angular.element(document.body).scope().vm.LatestJSON;
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['script', 'document'],
                    },
                });
                const formattedJson = json.map((manga) => ({
                    title: manga.SeriesName,
                    updatedAt: new Date(manga.Date),
                    url: `https://mangasee123.com/manga/${manga.IndexName}`,
                    coverImage: `https://cover.nep.li/cover/${manga.IndexName}.jpg`,
                }));
                success_1.default(formattedJson, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get the hottest updates from MangaSee
     *
     * @param callback - Callback function
     * @returns Returns an array of mangas in the hottest updates section in MangaSee's homepage.
     * @example
     *
     * ```js
     * await mangasee.getHotUpdates();
     * ```
     */
    getHotUpdates(callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            try {
                const json = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto('https://mangasee123.com/', { waitUntil: 'domcontentloaded' });
                    yield page.waitForFunction('window.angular.element(document.body).scope()');
                    return yield page.evaluate(() => {
                        const { angular } = window;
                        return angular.element(document.body).scope().vm.HotUpdateJSON;
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['script', 'document'],
                    },
                });
                const formattedJson = json.map((manga) => ({
                    title: manga.SeriesName,
                    updatedAt: new Date(manga.Date),
                    url: `https://mangasee123.com/manga/${manga.IndexName}`,
                    coverImage: `https://cover.nep.li/cover/${manga.IndexName}.jpg`,
                }));
                success_1.default(formattedJson, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    getMangaMeta(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Missing argument "url" is required', callback, rej);
            try {
                const data = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto(url, { waitUntil: 'domcontentloaded' });
                    yield page.addScriptTag({ path: require.resolve('jquery') });
                    yield page.waitForSelector('h1');
                    yield page.waitForFunction('window.angular.element(document.body).scope()');
                    return yield page.evaluate(() => {
                        var _a;
                        const { $, angular } = window;
                        const vm = angular.element(document.body).scope().vm;
                        const title = $('h1').text();
                        const alt = $('span.mlabel:contains("Alternate Name(s):")')
                            .parent()
                            .text()
                            .trim()
                            .replace('Alternate Name(s): ', '');
                        const authors = $('span.mlabel:contains("Author(s):")')
                            .siblings()
                            .map((_, el) => $(el).text())
                            .get();
                        const genres = $('span.mlabel:contains("Genre(s):")')
                            .siblings()
                            .map((_, el) => $(el).text())
                            .get();
                        const summary = $('div.top-5.Content').text().trim();
                        const type = $('span.mlabel:contains("Type:")').siblings().text().toLowerCase();
                        const _status = $('span.mlabel:contains("Status:")')
                            .siblings()
                            .map((_, el) => $(el).text().toLowerCase().split(' ')[0])
                            .get();
                        const status = {
                            scan: _status[0],
                            publish: _status[1],
                        };
                        const img = ((_a = document.querySelector('div.col-md-3.top-5 > img.img-fluid.bottom-5')) === null || _a === void 0 ? void 0 : _a.getAttribute('src')) || '';
                        const chapters = angular
                            .element(document.body)
                            .scope()
                            .vm.Chapters.reverse()
                            .map((chapter) => ({
                            name: chapter.ChapterName || `Chapter ${vm.ChapterDisplay(chapter.Chapter)}`,
                            url: `https://mangasee123.com/read-online/${vm.IndexName}${vm.ChapterURLEncode(chapter.Chapter)}`,
                            uploadDate: chapter.Date,
                        }))
                            .reverse();
                        return { title: { main: title, alt }, authors, genres, summary, type, status, coverImage: img, chapters };
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['script', 'document'],
                    },
                });
                success_1.default(Object.assign(Object.assign({}, data), { chapters: data.chapters.map((chapter) => (Object.assign(Object.assign({}, chapter), { uploadDate: new Date(chapter.uploadDate) }))) }), callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    getPages(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Missing argument "url" is required', callback, rej);
            try {
                const pages = yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto(url, { waitUntil: 'domcontentloaded' });
                    yield page.waitForFunction('window.angular.element(document.body).scope()');
                    return yield page.evaluate(() => {
                        const { angular } = window;
                        const $state = angular.element(document.body).scope();
                        const iterator = $state.vm.Pages;
                        const title = $state.vm.IndexName;
                        const baseURL = $state.vm.CurPathName;
                        /**
                         * MangaSee123 uses angular. We can get the chapters very quickly just by accessing the document state.
                         */
                        const pages = iterator.map((number) => `https://${baseURL}/manga/${title}/${$state.vm.CurChapter.Directory === '' ? '' : `${$state.vm.CurChapter.Directory}/`}${$state.vm.ChapterImage($state.vm.CurChapter.Chapter)}-${$state.vm.PageImage(number)}.png`);
                        return pages;
                    });
                }), {
                    domains: {
                        method: 'block',
                        value: this.BLOCKED_DOMAINS,
                    },
                    resource: {
                        method: 'unblock',
                        type: ['script', 'document'],
                    },
                });
                success_1.default(pages, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
}
exports.default = MangaSee;
//# sourceMappingURL=index.js.map