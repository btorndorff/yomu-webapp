import { LatestHotManga, Manga, MangaCallback, MangaChapters, MangaFilters, MangaGenre, MangaMeta, MangaOrder, MangaSearch, MangaSeeGenres, MangaStatus, MangaType, ScrapingOptions } from '..';
export declare type MangaSeeMeta = {
    title: {
        main: string;
        alt: string;
    };
    authors: string[];
    summary: string;
    genres: MangaGenre<MangaSee>[];
    coverImage: string;
    type: MangaType<MangaSee>;
    status: {
        scan: MangaStatus<MangaSee>;
        publish: MangaStatus<MangaSee>;
    };
    chapters: MangaChapters<MangaSee>[];
};
export interface MangaSeeOptions {
    orderBy?: MangaOrder<MangaSee>;
    orderType?: 'ascending' | 'descending';
    translationGroup?: 'any' | 'official';
    status?: {
        scan?: MangaStatus<MangaSee> | 'any';
        publish?: MangaStatus<MangaSee> | 'any';
    };
    type?: MangaType<MangaSee> | 'any';
    genres?: {
        include?: MangaGenre<MangaSee>[];
        exclude?: MangaGenre<MangaSee>[];
    };
}
export declare type MangaSeeGenre = keyof typeof MangaSeeGenres;
export interface MangaSeeMangaAlt {
    title: string;
    url: string;
    genres: MangaGenre<MangaSee>[];
    coverImage: string;
    status: MangaStatus<MangaSee>;
}
export interface MangaSeeManga {
    title: string;
    url: string;
    status: {
        scan: MangaStatus<MangaSee>;
        publish: MangaStatus<MangaSee>;
    };
    genres: MangaGenre<MangaSee>[];
    coverImage: string;
    updatedAt: Date;
}
export interface MangaSeeLatestHotManga {
    title: string;
    updatedAt: Date;
    url: string;
    coverImage: string;
}
export default class MangaSee {
    private options;
    protected BLOCKED_DOMAINS: string[];
    constructor(options?: ScrapingOptions);
    /**
     * Search up a manga from MangaSee
     *
     * @param query - Title of manga. Leave it at null if you don't want to search for a specific title. This parameter accepts either a `string` or `object` containing either or both `title` and `author`
     * @param filters  - Filters to apply when searching for manga
     * @param callback - Callback function
     * @returns Returns an array of mangas from mangasee123.com
     * @example
     * ```js
     * await mangasee.search('chainsaw man');
     * ```
     *
     * @example
     * ```js
     * await mangasee.search({ author: 'Fujimoto Tatsuki' });
     * ```
     *
     * @example
     * ```js
     * await mangasee.search(null, {
     *    genre: { include: ['Fantasy'], exclude: ['Seinen'] },
     *    status: { scan: 'ongoing', publish: 'ongoing' },
     *    orderBy: 'popularity(all_time)',
     *    orderType: 'ascending',
     *    type: 'manga',
     * });
     * ```
     */
    search(query?: MangaSearch<MangaSee>, filters?: MangaFilters<MangaSee>, callback?: MangaCallback<Manga<MangaSee>[]>): Promise<Manga<MangaSee>[]>;
    /**
     *  Get all mangas from the MangaSee directory. This can take 5-10 seconds to process since this is returning 5,000+ mangas.
     *
     * @param callback - Callback function
     * @returns Returns an array of every manga from the MangaSee directory
     * @example
     * ```js
     * const mangas = await mangasee.directory();
     * ```
     */
    directory(callback?: MangaCallback<MangaSeeMangaAlt[]>): Promise<MangaSeeMangaAlt[]>;
    /**
     * Get a list of mangas that have been recently updated from MangaSee
     *
     * @param callback - Callback function
     * @returns Returns an array of mangas in the latest chapters section in MangaSee's homepage.
     * @example
     *
     * ```js
     * await mangasee.getLatestUpdates();
     * ```
     */
    getLatestUpdates(callback?: MangaCallback<LatestHotManga<MangaSee>[]>): Promise<LatestHotManga<MangaSee>[]>;
    /**
     * Get the hottest updates from MangaSee
     *
     * @param callback - Callback function
     * @returns Returns an array of mangas in the hottest updates section in MangaSee's homepage.
     * @example
     *
     * ```js
     * await mangasee.getHotUpdates();
     * ```
     */
    getHotUpdates(callback?: MangaCallback<LatestHotManga<MangaSee>[]>): Promise<LatestHotManga<MangaSee>[]>;
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<MangaSee>>): Promise<MangaMeta<MangaSee>>;
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
//# sourceMappingURL=index.d.ts.map