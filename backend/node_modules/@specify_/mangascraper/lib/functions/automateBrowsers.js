"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = __importDefault(require("puppeteer"));
const preload_1 = __importDefault(require("./preload"));
const __1 = require("..");
function automateBrowsers(options, instances) {
    return __awaiter(this, void 0, void 0, function* () {
        const { puppeteerInstance = { instance: 'default' } } = options;
        try {
            const browser = yield (() => __awaiter(this, void 0, void 0, function* () {
                switch (puppeteerInstance.instance) {
                    case 'default':
                        return yield puppeteer_1.default.launch(Object.assign(Object.assign(Object.assign({}, __1.initPuppeteer), { args: options.proxy
                                ? [...__1.initPuppeteer.args, `--proxy-server=${options.proxy.host}:${options.proxy.port}`]
                                : __1.initPuppeteer.args, headless: !options.debug }), puppeteerInstance.launch));
                    case 'endpoint':
                        return yield puppeteer_1.default.connect({ browserWSEndpoint: puppeteerInstance.wsEndpoint });
                    case 'custom':
                    default:
                        return puppeteerInstance.browser;
                }
            }))();
            return Promise.all(instances.map(({ network, callback }, index) => __awaiter(this, void 0, void 0, function* () {
                const page = yield (() => __awaiter(this, void 0, void 0, function* () {
                    switch (puppeteerInstance.instance) {
                        case 'default':
                            if (index === 0)
                                return (yield browser.pages())[0];
                            return yield browser.newPage();
                        case 'custom':
                        default:
                            return yield browser.newPage();
                    }
                }))();
                yield page.setViewport({ width: 1920, height: 1080 });
                yield page.evaluateOnNewDocument(preload_1.default);
                yield page.setRequestInterception(true);
                page.on('request', (request) => {
                    if (network != null) {
                        if (network.resource) {
                            switch (network.resource.method) {
                                case 'block':
                                    if (network.resource.type.indexOf(request.resourceType()) !== -1)
                                        return request.abort();
                                case 'unblock':
                                    if (network.resource.type.indexOf(request.resourceType()) === -1)
                                        return request.abort();
                            }
                        }
                        if (network.domains) {
                            switch (network.domains.method) {
                                case 'unblock':
                                    if (!network.domains.value.some((url) => request.url().startsWith(url)))
                                        return request.abort();
                                case 'block':
                                    if (network.domains.value.some((url) => request.url().startsWith(url)))
                                        return request.abort();
                            }
                        }
                        return request.continue();
                    }
                    request.continue();
                });
                return callback(page).finally(() => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    switch (puppeteerInstance.instance) {
                        case 'endpoint':
                        case 'default':
                            yield page.close();
                            break;
                        case 'custom':
                            if ((_a = puppeteerInstance.options) === null || _a === void 0 ? void 0 : _a.closeAfterOperation)
                                yield page.close();
                            else if ((yield browser.pages()).length > 1)
                                yield page.close();
                    }
                }));
            }))).finally(() => __awaiter(this, void 0, void 0, function* () {
                var _b;
                switch (puppeteerInstance.instance) {
                    case 'default':
                        yield Promise.all((yield browser.pages()).map((page) => page.close()));
                        yield browser.close();
                    case 'endpoint':
                        browser.disconnect();
                        break;
                    case 'custom':
                        if ((yield browser.pages()).length <= 1 && ((_b = puppeteerInstance.options) === null || _b === void 0 ? void 0 : _b.closeAfterOperation)) {
                            yield Promise.all((yield browser.pages()).map((page) => page.close()));
                            yield browser.close();
                        }
                        break;
                }
            }));
        }
        catch (e) {
            throw Error(e);
        }
    });
}
exports.default = automateBrowsers;
//# sourceMappingURL=automateBrowsers.js.map