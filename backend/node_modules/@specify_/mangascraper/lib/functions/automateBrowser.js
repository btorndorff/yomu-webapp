"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = __importDefault(require("puppeteer"));
const preload_1 = __importDefault(require("./preload"));
const __1 = require("..");
function automateBrowser(options, callback, network) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { puppeteerInstance = { instance: 'default' } } = options;
        const browser = yield (() => __awaiter(this, void 0, void 0, function* () {
            switch (puppeteerInstance.instance) {
                case 'default':
                    return yield puppeteer_1.default.launch(Object.assign(Object.assign(Object.assign({}, __1.initPuppeteer), { args: options.proxy
                            ? [...__1.initPuppeteer.args, `--proxy-server=${options.proxy.host}:${options.proxy.port}`]
                            : __1.initPuppeteer.args, headless: !options.debug }), puppeteerInstance.launch));
                case 'endpoint':
                    return yield puppeteer_1.default.connect({ browserWSEndpoint: puppeteerInstance.wsEndpoint });
                case 'custom':
                default:
                    return puppeteerInstance.browser;
            }
        }))();
        const page = yield (() => __awaiter(this, void 0, void 0, function* () {
            switch (puppeteerInstance.instance) {
                case 'default':
                    return (yield browser.pages())[0];
                case 'custom':
                default:
                    return yield browser.newPage();
            }
        }))();
        try {
            yield page.setViewport({ width: 1920, height: 1080 });
            yield page.evaluateOnNewDocument(preload_1.default);
            yield page.setRequestInterception(true);
            page.on('request', (request) => {
                if (network != null) {
                    if (network.resource) {
                        switch (network.resource.method) {
                            case 'block':
                                if (network.resource.type.indexOf(request.resourceType()) !== -1)
                                    return request.abort();
                            case 'unblock':
                                if (network.resource.type.indexOf(request.resourceType()) === -1)
                                    return request.abort();
                        }
                    }
                    if (network.domains) {
                        switch (network.domains.method) {
                            case 'unblock':
                                if (!network.domains.value.some((url) => request.url().startsWith(url)))
                                    return request.abort();
                            case 'block':
                                if (network.domains.value.some((url) => request.url().startsWith(url)))
                                    return request.abort();
                        }
                    }
                    return request.continue();
                }
                request.continue();
            });
            return yield callback(page);
        }
        catch (e) {
            throw Error(e);
        }
        finally {
            switch (puppeteerInstance.instance) {
                case 'default':
                    yield page.close();
                    yield browser.close();
                    break;
                case 'endpoint':
                    yield page.close();
                    browser.disconnect();
                    break;
                case 'custom':
                    try {
                        yield page.close();
                    }
                    finally {
                        if ((yield browser.pages()).length <= 1 && ((_a = puppeteerInstance.options) === null || _a === void 0 ? void 0 : _a.closeAfterOperation))
                            yield browser.close();
                    }
                    break;
            }
        }
    });
}
exports.default = automateBrowser;
//# sourceMappingURL=automateBrowser.js.map