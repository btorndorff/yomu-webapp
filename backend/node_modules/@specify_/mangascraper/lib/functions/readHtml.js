"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio_1 = __importDefault(require("cheerio"));
const axios_1 = __importDefault(require("axios"));
const random_useragent_1 = __importDefault(require("random-useragent"));
const automateBrowser_1 = __importDefault(require("./automateBrowser"));
function readHtml(url, options, network, waitUntil) {
    return __awaiter(this, void 0, void 0, function* () {
        const { proxy } = options;
        try {
            const { data } = yield axios_1.default.get(url, {
                proxy,
                headers: {
                    'User-Agent': random_useragent_1.default.getRandom((ua) => ua.osName === 'Windows' && ua.browserName === 'Chrome'),
                },
            });
            return cheerio_1.default.load(data);
        }
        catch (e) {
            try {
                const html = yield automateBrowser_1.default(options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto(url, { waitUntil: waitUntil || 'load' });
                    return yield page.evaluate(() => document.body.innerHTML);
                }), network || { resource: { method: 'unblock', type: ['document'] } });
                return cheerio_1.default.load(html);
            }
            catch (e) {
                throw Error(e);
            }
        }
    });
}
exports.default = readHtml;
//# sourceMappingURL=readHtml.js.map