"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = __importDefault(require("puppeteer"));
const random_useragent_1 = __importDefault(require("random-useragent"));
class BrowserInstance {
    constructor() {
        this.args = {};
        this.instances = [];
    }
    launch() {
        return __awaiter(this, void 0, void 0, function* () {
            const { proxy, debug = false } = this.args;
            const args_proxy_server = typeof proxy !== 'undefined' && `--proxy-server=${proxy.host}:${proxy.port}`;
            const puppeteer_args = [
                args_proxy_server,
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-accelerated-2d-canvas',
                '--no-zygote',
                '--renderer-process-limit=1',
                '--no-first-run',
                '--ignore-certificate-errors',
                '--ignore-certificate-errors-spki-list',
                '--disable-dev-shm-usage',
                '--disable-infobars',
                '--lang=en-US,en',
                '--window-size=1920x1080',
                '--disable-extensions',
                `--user-agent=${random_useragent_1.default.getRandom((ua) => ua.osName === 'Windows' && ua.browserName === 'Chrome')}`,
            ].filter((item) => Boolean(item));
            if (this.browser == null)
                this.browser = yield puppeteer_1.default.launch({ headless: !debug, args: puppeteer_args, ignoreHTTPSErrors: true });
            this.setWorking(true);
            return this.browser;
        });
    }
    setWorking(boolean) {
        if (boolean === true)
            this.instances.push(boolean);
        else
            this.instances.shift();
    }
    isWorking() {
        return this.instances.length > 0;
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.browser == null)
                throw Error('Browser does not exist');
            if (this.isWorking()) {
                try {
                    yield Promise.all((yield this.browser.pages()).map((page) => page.close()));
                    yield this.browser.close();
                }
                catch (e) {
                    throw Error(e);
                }
                finally {
                    this.browser = undefined;
                }
            }
            else
                this.setWorking(false);
        });
    }
}
exports.default = new BrowserInstance();
//# sourceMappingURL=browserInstance.js.map