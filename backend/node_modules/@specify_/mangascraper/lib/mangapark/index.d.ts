import { LatestHotManga, Manga, MangaCallback, MangaChapters, MangaFilters, MangaGenre, MangaMeta, MangaOrder, MangaParkGenres, MangaRating, MangaSearch, MangaStatus, MangaType, ScrapingOptions } from '..';
export declare type MangaParkMeta = {
    title: {
        main: string;
        alt?: string[];
    };
    authors: string[];
    artists: string[];
    coverImage: string;
    summary: string;
    genres: MangaGenre<MangaPark>[];
    type: MangaType<MangaPark>;
    status: Omit<MangaStatus<MangaPark>, 'any'>;
    rating: MangaRating;
    popularity: string;
    chapters: {
        recentlyUpdated?: 'duck' | 'fox' | 'rock' | 'panda' | 'mini' | 'toon';
        duck: MangaChapters<MangaPark>[];
        fox: MangaChapters<MangaPark>[];
        rock: MangaChapters<MangaPark>[];
        panda: MangaChapters<MangaPark>[];
        mini: MangaChapters<MangaPark>[];
        toon: MangaChapters<MangaPark>[];
    };
};
export interface MangaParkLatestHotManga {
    title: string;
    url: string;
    coverImage: string;
    updatedWhen: string;
    genres: MangaGenre<MangaPark>[];
}
export declare type MangaParkManga = {
    title: string;
    url: string;
    authors: string[];
    coverImage: string;
    genres: string[];
    rating: MangaRating;
};
export interface MangaParkOptions {
    genres?: {
        include?: MangaGenre<MangaPark>[];
        exclude?: MangaGenre<MangaPark>[];
    };
    status?: MangaStatus<MangaPark> | 'any';
    rating?: '5☆' | '4☆' | '3☆' | '2☆' | '1☆' | '0☆' | 'any';
    type?: MangaType<MangaPark> | 'any';
    yearReleased?: string;
    orderBy?: MangaOrder<MangaPark>;
    page?: number;
}
export declare type MangaParkGenre = keyof typeof MangaParkGenres;
export default class MangaPark {
    private options;
    constructor(options?: ScrapingOptions);
    /**
     * Search up a manga from MangaParkv2
     *
     * @param query - Title of manga. By default, it searches for titles matching this value. If you want to search for author and/or title, pass in an object containing either/both `author` and/or `title`.
     * @param filters - Filters to apply to query
     * @param callback - Callback function
     * @returns Returns an array of mangas from MangaPark (v2)
     * @example
     * ```js
     * const mangapark = new MangaPark();
     * ```
     * ```js
     * mangapark.search('Berserk');
     * ```
     * ```js
     * mangapark.search({ author: 'Gotouge Koyoharu' })
     * ```
     * ```js
     * mangapark.search(null, { type: 'manga', genre: { include: ['Horror'] } })
     * ```
     */
    search(query?: MangaSearch<MangaPark>, filters?: MangaFilters<MangaPark>, callback?: MangaCallback<Manga<MangaPark>[]>): Promise<Manga<MangaPark>[]>;
    /**
     * Get the metadata of a manga
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns the metadata of a manga
     * @example
     * ```js
     * const mangapark = new MangaPark();
     * ```
     * ```js
     * await mangapark.getMangaMeta('https://v2.mangapark.net/manga/berserk');
     * ```
     */
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<MangaPark>>): Promise<MangaMeta<MangaPark>>;
    /**
     * Get a list of mangas from MangaPark's latest manga releases
     *
     * @param options - Options to provide when getting latest updates
     * @param callback - Callback function
     * @returns Returns an array of mangas from MangaPark's latest manga releases page
     */
    getLatestUpdates(options?: {
        page: number;
    }, callback?: MangaCallback<LatestHotManga<MangaPark>[]>): Promise<LatestHotManga<MangaPark>[]>;
    /**
     * Get raw image URLs from a chapter URL. Since MangaPark uses Cloudflare, make sure to add `referer: https://v2.mangapark.net/` to every GET request when fetching the image or else the image will not load.
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns an array of strings that contain the img URLs of the pages from the chapter URL
     * @example
     * ```js
     * const mangapark = new MangaPark();
     * ```
     * ```js
     * await mangapark.getPages('https://xcdn-222.mangapark.net/10102/69/9b/5c791a3ae9c047226f2bb996/02_75696_711_1114.webp');
     * ```
     */
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
//# sourceMappingURL=index.d.ts.map