"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const date_fns_1 = require("date-fns");
const failure_1 = __importDefault(require("../functions/failure"));
const readHtml_1 = __importDefault(require("../functions/readHtml"));
const success_1 = __importDefault(require("../functions/success"));
const __1 = require("..");
const splitAltTitles_1 = __importDefault(require("../functions/splitAltTitles"));
class Manganato {
    constructor(options = {}) {
        this.options = options;
    }
    /**
     * Search up a manga from Manganato
     *
     * @param query - Title of manga. By default, it searches for all mangas that have matching keywords. If you want to only search for a specific keyword (such as author name only), pass in an object with the key `keywords` containing either values: `author`, `artist`, `title`.
     * ```js
     * await manganato.search({ keywords: 'title', search: 'YOUR TITLE' });
     * ```
     * @param filters - Filters to apply when searching up the manga.
     * ```js
     * await manganato.search(null, { genres: { include: ["Comedy"], exclude: ["Action"] } });
     * ```
     * @param callback - Callback function
     * @returns Returns an array of manga from manganato
     * @example
     * ```js
     * import { Manganato } from "@specify_/mangascraper";
     * const manganato = new Manganato();
     *
     * (async () => {
     *  const mangas = manganato.search({ title: "black clover" });
     *  console.log(mangas); // Output: [{ title: "Black Clover" ...}, ... ]
     * })();
     * ```
     */
    search(query = '', filters = {}, callback = () => void 0) {
        if (query == null)
            query = '';
        if (filters == null)
            filters = {};
        const { genres = {}, status = 'any', orderBy = 'latest_updates', page = 1 } = filters;
        function generateURL() {
            let includeGenres = ''; // short for genre_includes
            let excludeGenres = ''; // short for genre_excludes
            const keyw = (() => {
                if (query == null)
                    return '';
                if (typeof query === 'string')
                    return `keyw=${query.replace(/[^a-zA-Z0-9]/g, '_')}`;
                const { search, keywords } = query;
                if (keywords === 'title')
                    return `keyw=${search.replace(/[^a-zA-Z0-9]/g, '_')}`;
                if (keywords === 'author')
                    return `keyw=${search.replace(/[^a-zA-Z0-9]/g, '_')}&keyt=author`;
                if (keywords === 'alt_title')
                    return `keyw=${search.replace(/[^a-zA-Z0-9]/g, '_')}&keyt=alternative`;
                return `keyw=${search.replace(/[^a-zA-Z0-9]/g, '_')}`;
            })(); // Basically search query for manganato
            const sts = `sts=${status === 'any' ? 'all' : status}` || ''; // short for status
            const orby = (() => {
                /** Converts 'orderBy' into an argument manganato can use for its filters */
                switch (orderBy) {
                    case 'A-Z':
                        return 'orby=az';
                    case 'new_manga':
                        return 'orby=newest';
                    case 'latest_updates':
                        return '';
                    case 'most_views':
                        return 'orby=topview';
                    default:
                        return '';
                }
            })(); // short for Order By
            /** Check if there is a genre object */
            if (genres != null) {
                /** Put each genre from 'includes' into 'genre_includes' */
                includeGenres =
                    (genres.include && `g_i=_${genres.include.map((genre) => __1.ManganatoGenres[genre]).join('_')}_`) || '';
                /** Put each genre from 'excludes' into 'genre_excludes' */
                excludeGenres =
                    (genres.exclude && `g_e=_${genres.exclude.map((genre) => __1.ManganatoGenres[genre]).join('_')}_`) || '';
            }
            const urlArgs = [includeGenres, excludeGenres, sts, orby, keyw].filter((arg) => arg.length > 0);
            return `https://manganato.com/advanced_search?s=all&${urlArgs.join('&')}&page=${page}`;
        }
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (page == null)
                return failure_1.default('Missing argument "page" is required', callback, rej);
            if (page <= 0)
                return failure_1.default('"page" must be greater than 0', callback, rej);
            try {
                /** Parse HTML document */
                const $ = yield readHtml_1.default(generateURL(), this.options);
                /** Get manga URLs and titles */
                const titleURLs = $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > h3 > a`)
                    .map((_, element) => {
                    const title = $(element).text();
                    const url = $(element).attr('href');
                    if (title != null && url != null)
                        return { title, url };
                })
                    .get();
                /** Get manga author(s) */
                const authors = $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-author`)
                    .map((_, element) => [$(element).text().split(', ')])
                    .get();
                /** Get manga date */
                const updatedAt = $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-time`)
                    .map((_, element) => date_fns_1.parse($(element).text(), 'MMM dd,yy', new Date()))
                    .get();
                /** Get manga views */
                const views = $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-view`)
                    .map((_, element) => $(element).text())
                    .get();
                /** Get manga cover image */
                const coverImage = $(`div.panel-content-genres > div.content-genres-item > a.genres-item-img > img`)
                    .map((_, element) => $(element).attr('src'))
                    .get();
                const mangaList = titleURLs.map(({ title, url }, i) => ({
                    title,
                    url,
                    authors: authors[i],
                    coverImage: coverImage[i],
                    updatedAt: updatedAt[i],
                    views: views[i],
                }));
                success_1.default(mangaList, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Gets metadata of manga such as the genre, authors, chapters, etc.
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns metadata of manga
     * @example
     * ```js
     * import { MangaNato } from "@specify_/mangascraper";
     *
     * const manganato = new MangaNato();
     *
     * async function test() {
     *  const meta = await manganato.getMangaMeta("https://manganato.com/manga-jk986519");
     *  console.log(meta);
     * }
     *
     * test(); // Output: { title: { 'Utakata No Minato', alt: [ 'Minato of the Foam', 'ウタカタノミナト' ] } ... }
     * ```
     */
    getMangaMeta(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (url == null)
                return failure_1.default('Missing argument "url" is required', callback, rej);
            try {
                /** Parse HTML Document */
                const $ = yield readHtml_1.default(url, this.options);
                /** Get manga title */
                const mainTitle = $(`div.panel-story-info > div.story-info-right > h1`).text();
                /** Get manga alternate titles */
                const altTitles = $(`div.story-info-right > table.variations-tableInfo > tbody > tr > td.table-value > h2`)
                    .map((_, el) => {
                    const alternateTitles = $(el).text();
                    if (typeof alternateTitles == null)
                        return;
                    return splitAltTitles_1.default(alternateTitles);
                })
                    .get();
                /** Get manga author(s) */
                const authors = $(`div.story-info-right > table.variations-tableInfo > tbody > tr > td.table-value > a[rel="nofollow"]`)
                    .map((_, el) => $(el).text())
                    .get();
                /** Get manga status */
                const status = $(`div.story-info-right > table.variations-tableInfo > tbody > tr > td.table-label > i.info-status`)
                    .parent()
                    .siblings('td.table-value')
                    .text();
                /** Get manga genres */
                const genres = $(`div.story-info-right > table.variations-tableInfo > tbody > tr > td.table-label > i.info-genres`)
                    .parent()
                    .siblings('td.table-value')
                    .children(`a`)
                    .map((_, el) => $(el).text())
                    .get();
                /** Get manga updated date */
                const updatedAt = new Date($(`div.story-info-right-extent > p > span.stre-label > i.info-time`)
                    .parent()
                    .siblings('span.stre-value')
                    .text());
                /** Get manga views */
                const views = $(`div.story-info-right-extent > p > span.stre-label > i.info-view`)
                    .parent()
                    .siblings('span.stre-value')
                    .text();
                /** Get manga rating */
                const ratingText = $(`div.story-info-right-extent > p > em#rate_row_cmd > em > em`)
                    .map((_, el) => $(el).text().trim().split(' ').join('').split('\n'))
                    .get();
                const rating = {
                    sourceRating: ratingText[0],
                    voteCount: Number(ratingText[4]).toLocaleString(),
                    ratingPercentage: `${((Number(ratingText[2].substring(0, 3)) / Number(ratingText[3])) * 100).toFixed(2)}%`,
                    ratingStars: `${ratingText[2].substring(0, 3)} / ${ratingText[3]}`,
                };
                /** Get manga summary */
                const summary = $(`div.panel-story-info-description`).clone().children().remove().end().text().trim();
                /** Get manga cover image */
                const coverImage = (_a = $(`div.story-info-left > span.info-image > img`).attr('src')) !== null && _a !== void 0 ? _a : '';
                /** Get manga chapters */
                // Get chapter names and URLs
                const chapterNameURL = $(`div.panel-story-chapter-list > ul.row-content-chapter > li > a.chapter-name`)
                    .map((_, el) => {
                    const chapterName = $(el).text();
                    const chapterUrl = $(el).attr('href');
                    if (chapterName != null && chapterUrl != null)
                        return { name: chapterName, url: chapterUrl };
                })
                    .get();
                // Get chapter views
                const chapterViews = $(`div.panel-story-chapter-list > ul.row-content-chapter > li > span.chapter-view`)
                    .map((_, el) => $(el).text())
                    .get();
                // Get chapter dates
                const chapterDates = $(`div.panel-story-chapter-list > ul.row-content-chapter > li > span.chapter-time`)
                    .map((_, el) => date_fns_1.parse($(el).text(), 'MMM dd,yy', new Date()))
                    .get();
                /** Get data from chapters and arrange them into JSON-like data */
                const chapters = chapterNameURL.map(({ name, url: chapterUrl }, i) => ({
                    name,
                    url: chapterUrl,
                    uploadDate: chapterDates[i],
                    views: chapterViews[i],
                }));
                success_1.default({
                    title: {
                        main: mainTitle,
                        alt: altTitles,
                    },
                    coverImage,
                    authors,
                    status,
                    summary,
                    genres: genres,
                    rating,
                    updatedAt,
                    views,
                    chapters,
                }, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get raw image URLs from a chapter URL. Since readmanganato uses Cloudflare, make sure
     * to attach `referer: https://readmanganato.com/` to the request headers when fetching images
     * or else the images will not load.
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns an array of raw img URLs (manga pages) from the chapter URL
     * @example
     * ```ts
     * // React-native example
     * <Image source={{
     *    uri: 'https://s8.mkklcdnv6temp.com/mangakakalot/r1/read_boku_no_hero_academia_manga/chapter_318/1.jpg',
     *    method: 'GET',
     *    headers: {
     *        referer: 'https://readmanganato.com/'
     *        }
     *    }}
     * />
     * ```
     */
    getPages(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Argument "url" is required', callback, rej);
            try {
                /** Parse HTML Document */
                const $ = yield readHtml_1.default(url, this.options);
                /** Get each page url */
                const pages = $(`div.container-chapter-reader > img`)
                    .map((_, el) => {
                    const img = $(el).attr('src');
                    if (img != null)
                        return img;
                })
                    .get();
                success_1.default(pages, callback, res);
            }
            catch (e) {
                return failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get a list of manga that contain the given genre.
     * This can only search for one genre at a time, so if you
     * want to search multiple genres, use the `search()` method instead.
     *
     * @param genre - A manga genre (e.g. Comedy, Fantasy)
     * @param options - Options to add to search (e.g. Filter results for ongoing mangas)
     * @param callback - Callback Function
     * @returns Returns an array of manga from the given genre
     * @example
     * ```js
     * import { MangaNato } from "manganato";
     *
     * const manganato = new MangaNato();
     *
     * async function test() {
     *  const mangas = await manganato.getMangasFromGenre('Comedy', { type: 'new' })
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [{ ... }, { ... }, ...] Fetches the newest mangas with the Comedy genre
     * ```
     */
    getMangasFromGenre(genre, options = {}, callback = () => void 0) {
        const { age: type = 'updated', status = 'all', page = 1 } = options;
        function generateURL() {
            const filterState = `state=${status}`;
            const filterType = `type=${type === 'updated' ? 'latest' : 'newest'}`;
            const baseUrl = `https://manganato.com/genre-${__1.ManganatoGenres[genre]}/${page}?${filterType}&${filterState}`;
            return baseUrl;
        }
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (genre == null)
                return failure_1.default('Missing argument "genres" is required', callback, rej);
            if (page == null)
                return failure_1.default('Missing argument "page" is required', callback, rej);
            if (page <= 0)
                return failure_1.default('"page" must be greater than 0', callback, rej);
            try {
                /** Parse HTML document */
                const $ = yield readHtml_1.default(generateURL(), this.options);
                const titles = [];
                const urls = [];
                const authors = [];
                const updatedAt = [];
                const views = [];
                const coverImage = [];
                /** Get manga titles */
                $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > h3 > a.genres-item-name`).each((_, el) => {
                    const title = $(el).text();
                    if (typeof title !== 'undefined')
                        titles.push(title);
                });
                /** Get manga views */
                $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-view`).each((_, el) => {
                    const viewCount = $(el).text();
                    if (typeof viewCount !== 'undefined')
                        views.push(viewCount);
                });
                /** Get manga date */
                $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-time`).each((_, el) => {
                    const timestamp = $(el).text();
                    if (timestamp != null)
                        updatedAt.push(date_fns_1.parse(timestamp, 'MMM dd,yy', new Date()));
                });
                /** Get manga authors */
                $(`div.panel-content-genres > div.content-genres-item > div.genres-item-info > p.genres-item-view-time > span.genres-item-author`).each((_, el) => {
                    const author = $(el).text();
                    if (typeof author !== 'undefined')
                        authors.push(author.split(', '));
                });
                /** Get manga cover image */
                $(`div.panel-content-genres > div.content-genres-item > a.genres-item-img > img.img-loading`).each((_, el) => {
                    var _a;
                    coverImage.push((_a = $(el).attr('src')) !== null && _a !== void 0 ? _a : '');
                });
                /** Get manga URL */
                $(`div.panel-content-genres > div.content-genres-item > a.genres-item-img`).each((_, el) => {
                    const url = $(el).attr('href');
                    if (typeof url !== 'undefined')
                        urls.push(url);
                });
                const mangas = titles.map((title, index) => ({
                    title,
                    url: urls[index],
                    authors: authors[index],
                    updatedAt: updatedAt[index],
                    views: views[index],
                    coverImage: coverImage[index],
                }));
                success_1.default(mangas, callback, res);
            }
            catch (e) {
                return failure_1.default(e, callback, rej);
            }
        }));
    }
}
exports.default = Manganato;
//# sourceMappingURL=index.js.map