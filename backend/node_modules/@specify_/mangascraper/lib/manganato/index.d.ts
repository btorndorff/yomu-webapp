import { MangaCallback, MangaMeta, MangaFilters, ManganatoGenres, MangaGenre, MangaSearch, Manga, MangaGenreFilters, ScrapingOptions, MangaOrder, MangaStatus } from '..';
export declare type ManganatoQuery = {
    keywords: 'author' | 'title' | 'alt_title' | 'everything';
    search: string;
} | string;
export interface ManganatoManga {
    title: string;
    url: string;
    authors: string[];
    updatedAt: Date;
    views: string;
    coverImage: string;
}
export interface ManganatoOptions {
    genres?: {
        include?: ManganatoGenre[];
        exclude?: ManganatoGenre[];
    };
    status?: MangaStatus<Manganato> | 'any';
    orderBy?: MangaOrder<Manganato>;
    page?: number;
}
export declare type ManganatoGenre = keyof typeof ManganatoGenres;
export default class Manganato {
    private options;
    constructor(options?: ScrapingOptions);
    /**
     * Search up a manga from Manganato
     *
     * @param query - Title of manga. By default, it searches for all mangas that have matching keywords. If you want to only search for a specific keyword (such as author name only), pass in an object with the key `keywords` containing either values: `author`, `artist`, `title`.
     * ```js
     * await manganato.search({ keywords: 'title', search: 'YOUR TITLE' });
     * ```
     * @param filters - Filters to apply when searching up the manga.
     * ```js
     * await manganato.search(null, { genres: { include: ["Comedy"], exclude: ["Action"] } });
     * ```
     * @param callback - Callback function
     * @returns Returns an array of manga from manganato
     * @example
     * ```js
     * import { Manganato } from "@specify_/mangascraper";
     * const manganato = new Manganato();
     *
     * (async () => {
     *  const mangas = manganato.search({ title: "black clover" });
     *  console.log(mangas); // Output: [{ title: "Black Clover" ...}, ... ]
     * })();
     * ```
     */
    search(query?: MangaSearch<Manganato>, filters?: MangaFilters<Manganato>, callback?: MangaCallback<Manga<Manganato>[]>): Promise<Manga<Manganato>[]>;
    /**
     * Gets metadata of manga such as the genre, authors, chapters, etc.
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns metadata of manga
     * @example
     * ```js
     * import { MangaNato } from "@specify_/mangascraper";
     *
     * const manganato = new MangaNato();
     *
     * async function test() {
     *  const meta = await manganato.getMangaMeta("https://manganato.com/manga-jk986519");
     *  console.log(meta);
     * }
     *
     * test(); // Output: { title: { 'Utakata No Minato', alt: [ 'Minato of the Foam', 'ウタカタノミナト' ] } ... }
     * ```
     */
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<Manganato>>): Promise<MangaMeta<Manganato>>;
    /**
     * Get raw image URLs from a chapter URL. Since readmanganato uses Cloudflare, make sure
     * to attach `referer: https://readmanganato.com/` to the request headers when fetching images
     * or else the images will not load.
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns an array of raw img URLs (manga pages) from the chapter URL
     * @example
     * ```ts
     * // React-native example
     * <Image source={{
     *    uri: 'https://s8.mkklcdnv6temp.com/mangakakalot/r1/read_boku_no_hero_academia_manga/chapter_318/1.jpg',
     *    method: 'GET',
     *    headers: {
     *        referer: 'https://readmanganato.com/'
     *        }
     *    }}
     * />
     * ```
     */
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
    /**
     * Get a list of manga that contain the given genre.
     * This can only search for one genre at a time, so if you
     * want to search multiple genres, use the `search()` method instead.
     *
     * @param genre - A manga genre (e.g. Comedy, Fantasy)
     * @param options - Options to add to search (e.g. Filter results for ongoing mangas)
     * @param callback - Callback Function
     * @returns Returns an array of manga from the given genre
     * @example
     * ```js
     * import { MangaNato } from "manganato";
     *
     * const manganato = new MangaNato();
     *
     * async function test() {
     *  const mangas = await manganato.getMangasFromGenre('Comedy', { type: 'new' })
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [{ ... }, { ... }, ...] Fetches the newest mangas with the Comedy genre
     * ```
     */
    getMangasFromGenre(genre: MangaGenre<Manganato>, options?: MangaGenreFilters<Manganato>, callback?: MangaCallback<Manga<Manganato>[]>): Promise<Manga<Manganato>[]>;
}
//# sourceMappingURL=index.d.ts.map