"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const date_fns_1 = require("date-fns");
const failure_1 = __importDefault(require("../functions/failure"));
const readHtml_1 = __importDefault(require("../functions/readHtml"));
const success_1 = __importDefault(require("../functions/success"));
const __1 = require("..");
const splitAltTitles_1 = __importDefault(require("../functions/splitAltTitles"));
class Mangakakalot {
    constructor(options = {}) {
        this.options = options;
    }
    /**
     * Get a list of manga that match the title. Unfortunately, Mangakakalot does not offer an advanced search, so this can only search manga titles only. I will be updating this if Mangakakalot introduces a better search system. This method also requires you to have at least **3 characters** minimum.
     *
     * @param keyword - Title of manga (e.g "Black Clover", "One Piece", "Naruto")
     * @param callback - Callback function
     * @returns List of Manga that match `title`
     * @example
     * ```typescript
     * import { Mangakakalot } from '@specify_/mangascraper';
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const mangas = await mangakakalot.search("pokemon")
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [ { title: 'Pokemon: The World Champion Season', url: 'https://mangakakalot.com/manga/zv925092' ... }]
     * ```
     */
    search(keyword, callback = () => void 0) {
        function generateURL() {
            const search = keyword.replace(/[^a-zA-Z0-9]/g, '_');
            const baseUrl = `https://mangakakalot.com/search/story/${search}`;
            return baseUrl;
        }
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (keyword == null)
                return failure_1.default('Missing argument "keyword" is required', callback, rej);
            if (keyword.length < 3) {
                return failure_1.default('"keyword" must be greater than 3 characters', callback, rej);
            }
            try {
                /** Load HTML Document to cheerio to extract HTML data */
                const $ = yield readHtml_1.default(generateURL(), this.options);
                const authors = [];
                const views = [];
                const updatedAt = [];
                /** Simple string date converter to Date type */
                function convertToDate(date) {
                    return date_fns_1.parse(date, 'MMM-dd-yyyy HH:mm', new Date());
                }
                /** Gets all URLs to their respected manga */
                const links = $(`div.story_item > div.story_item_right > h3.story_name > a`)
                    .map((index, element) => {
                    const link = $(element).attr('href');
                    if (typeof link !== 'undefined')
                        return link;
                })
                    .get();
                /** Gets all Titles */
                const titles = $(`div.story_item > div.story_item_right > h3.story_name > a`)
                    .map((index, element) => {
                    const title = $(element).text();
                    if (typeof title !== 'undefined')
                        return title;
                })
                    .get();
                /** Gets all cover images */
                const coverImage = $(`div.story_item > a[rel="nofollow"] > img`)
                    .map((index, element) => { var _a; return (_a = $(element).attr('src')) !== null && _a !== void 0 ? _a : ''; })
                    .get();
                /** Gets all Authors, Dates, and View Count */
                $(`div.story_item > div.story_item_right > span`).each((index, element) => {
                    const attribute = $(element).text();
                    if (typeof attribute === 'undefined')
                        return;
                    if (attribute.startsWith('Author(s) :'))
                        authors.push(attribute.substring(12).split(','));
                    if (attribute.startsWith('Updated :'))
                        updatedAt.push(convertToDate(attribute.substring(10)));
                    if (attribute.startsWith('View :'))
                        views.push(attribute.substring(7));
                });
                const mangaList = new Array(titles.length)
                    .fill('')
                    .map((_, index) => ({
                    title: titles[index],
                    url: links[index],
                    authors: authors[index],
                    updatedAt: updatedAt[index],
                    views: views[index],
                    coverImage: coverImage[index],
                }))
                    /** Yeah... mangakakalot redirects to this website */
                    .filter((manga) => !manga.url.startsWith('https://readmanganato.com/'));
                success_1.default(mangaList, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Gets metadata of manga such as the genre, authors, chapters, etc.
     *
     * @param url - Mangakakalot URL page of the manga
     * @param callback - Callback function
     * @returns Returns metadata of manga (chapters, alternate titles, status, etc.)
     * @example
     * ```js
     * import { Mangakakalot } from "@specify_/mangascraper";
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const meta = await mangakakalot.getMangaMeta('https://mangakakalot.com/read-gj8eg158504836414');
     *  console.log(meta);
     * }
     *
     * test(); // Output: { title: { main: 'Fukushuu...', alt: { jp: [...], en: [...], cn: [], ...} }}
     * ```
     */
    getMangaMeta(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (url == null)
                return failure_1.default('Argument "url" is required', callback, rej);
            try {
                /** Load HTML Document to cheerio to extract HTML data */
                const $ = yield readHtml_1.default(url, this.options);
                let status;
                let updatedAt = new Date();
                let views = '';
                const chaptersViews = [];
                const chaptersDate = [];
                /** Get main title */
                const mainTitle = $(`h1`).text();
                /** Get alternate titles */
                const altTitles = $(`div.manga-info-top > ul.manga-info-text > li > h2.story-alternative`)
                    .map((_, element) => splitAltTitles_1.default($(element).text().substring(14)))
                    .get();
                /** Get manga status, update date, views */
                $(`div.manga-info-top > ul > li`).each((_, element) => {
                    const unknownLi = $(element).text();
                    if (unknownLi.startsWith('Status :'))
                        status = unknownLi.substring(9).toLowerCase();
                    if (unknownLi.startsWith('Last updated :'))
                        updatedAt = new Date(unknownLi.substring(15));
                    if (unknownLi.startsWith('View :'))
                        views = unknownLi.substring(7);
                });
                /** Get manga authors */
                const authors = $(`div.manga-info-top > ul > li:contains("Author(s)") > a`)
                    .map((_, element) => $(element).text())
                    .get();
                /** Get manga genres */
                const genres = $(`div.manga-info-top > ul > li:contains("Genres") > a`)
                    .map((_, element) => $(element).text())
                    .get();
                /** Get manga rating */
                const ratingText = $(`div.manga-info-top > ul > li[style="line-height: 20px; font-size: 11px; font-style: italic; padding: 0px 0px 0px 44px;"] > em#rate_row_cmd`).text();
                const stringArr = ratingText.split(' ');
                const src = stringArr[0].trim();
                const voteCount = Number(stringArr[7]).toLocaleString();
                const ratingStars = `${stringArr[3]} / ${stringArr[5]}`;
                const ratingPercentage = `${((Number(stringArr[3]) / Number(stringArr[5])) * 100).toFixed(2)}%`;
                const rating = { sourceRating: src, voteCount, ratingPercentage, ratingStars };
                /** Remove all children and get summary text */
                const summary = $(`div#noidungm`).clone().children().remove().end().text().trim();
                /** Get image URL and alt */
                const coverImage = (_a = $(`div.manga-info-top > div.manga-info-pic > img`).attr('src')) !== null && _a !== void 0 ? _a : '';
                /** Get manga chapters */
                const chapterDiv = $(`div.manga-info-chapter > div.chapter-list > div.row`);
                /** Get manga chapter name and url */
                const chaptersNameURL = chapterDiv
                    .find(`span > a`)
                    .map((_, element) => {
                    var _a;
                    const chapterName = $(element).text();
                    const chapterURL = (_a = $(element).attr('href')) !== null && _a !== void 0 ? _a : '';
                    return { name: chapterName, url: chapterURL };
                })
                    .get();
                /** Get views of every manga chapter */
                chapterDiv.children(`span:not(:has(a))`).each((_, element) => {
                    const chaptersViewDate = $(element).text();
                    if (chaptersViewDate.match(/[a-zA-Z]/g))
                        chaptersDate.push(date_fns_1.parse(chaptersViewDate, 'MMM-dd-yy', new Date()));
                    else
                        chaptersViews.push(chaptersViewDate);
                });
                const chapters = chapterDiv
                    .map((index) => ({
                    name: chaptersNameURL[index].name,
                    url: chaptersNameURL[index].url,
                    uploadDate: chaptersDate[index],
                    views: chaptersViews[index],
                }))
                    .get();
                success_1.default({
                    title: { main: mainTitle, alt: altTitles },
                    status,
                    updatedAt,
                    views,
                    authors,
                    genres: genres,
                    rating,
                    summary,
                    coverImage,
                    chapters,
                }, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get a list of manga from mangakakalot
     *
     * @param genre - Mangakakalot Genre
     * @param filters - Filters to apply based on mangakakalot's query system
     * @param callback - Callback function
     * @returns Returns a list of manga from mangakakalot
     * @example
     * ```js
     * import { Mangakakalot } from "@specify_/mangascraper";
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const mangas = await mangakakalot.getMangas({ genre: 'Comedy' });
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [{ title: 'The Provincial...', url: 'https://mangakakalot.com/...', ... }]
     * ```
     */
    getMangasFromGenre(genre = 'any', filters = {}, callback = () => void 0) {
        const { page = 1, status = 'any', age: type = 'updated' } = filters;
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (page == null)
                return failure_1.default('Missing argument "page" is required', callback, rej);
            if (typeof page !== 'number')
                return failure_1.default('"page" must be a number', callback, rej);
            if (page <= 0)
                return failure_1.default('"page" must be a number greater than 0', callback, rej);
            try {
                /** Parse HTML Document */
                const $ = yield readHtml_1.default(`https://mangakakalot.com/manga_list?type=${type === 'updated' ? 'latest' : 'newest'}&category=${genre != null && genre !== 'any' ? __1.MangakakalotGenres[genre] : ''}&state=${status === 'any' ? 'all' : status}&page=${page}`, this.options);
                /** Get manga titles */
                const titleURLs = $(`div.list-truyen-item-wrap > h3 > a`)
                    .map((_, element) => {
                    var _a;
                    const anchorEl = $(element);
                    const title = anchorEl.text();
                    const url = (_a = anchorEl.attr('href')) !== null && _a !== void 0 ? _a : '';
                    return { title, url };
                })
                    .get();
                /** Get manga views */
                const views = $(`div.list-truyen-item-wrap > div > span.aye_icon`)
                    .map((_, element) => $(element).text())
                    .get();
                /** Get manga cover img */
                const covers = $(`div.list-truyen-item-wrap > a > img`)
                    .map((_, element) => { var _a; return (_a = $(element).attr('src')) !== null && _a !== void 0 ? _a : ''; })
                    .get();
                const mangaList = titleURLs
                    .map(({ title, url }, i) => ({
                    title,
                    url,
                    views: views[i],
                    coverImage: covers[i],
                }))
                    /** Yeah... mangakakalot redirects to this website */
                    .filter((manga) => !manga.url.startsWith('https://readmanganato.com/'));
                success_1.default(mangaList, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get raw image URLs from a chapter URL. Since mangakakalot uses cloudfare, make sure
     * to attach `referer: https://mangakakalot.com/` to the request headers when fetching images
     * or else the images will not load.
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns raw image URLs of the chapter.
     * @example
     * ```jsx
     * // React-native example
     * <Image source={{
     *    uri: 'https://s8.mkklcdnv6temp.com/mangakakalot/y1/yk923891/chapter_38/1.jpg',
     *    method: 'GET',
     *    headers: {
     *        referer: 'https://mangakakalot.com/'
     *        }
     *    }}
     * />
     * ```
     */
    getPages(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Argument "url" is required', callback, rej);
            try {
                /** Parse HTML document */
                const $ = yield readHtml_1.default(url, this.options);
                /** Get image URLs */
                const pages = $(`div.container-chapter-reader > img[src]`)
                    .map((_, element) => $(element).attr('src'))
                    .get();
                success_1.default(pages, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
}
exports.default = Mangakakalot;
//# sourceMappingURL=index.js.map