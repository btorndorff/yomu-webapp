import { MangaCallback, MangaMeta, MangakakalotGenres, MangaFilters, Manga, ScrapingOptions, MangaGenre, MangaAge, MangaStatus } from '..';
export interface MangakakalotManga {
    title: string;
    url: string;
    authors: string[];
    updatedAt: Date;
    views: string;
    coverImage: string;
}
export interface MangakakalotAlt {
    title: string;
    url: string;
    views: string;
    coverImage: string;
}
export declare type MangakakalotGenre = keyof typeof MangakakalotGenres | 'any';
export interface MangakakalotOptions {
    status?: MangaStatus<Mangakakalot> | 'any';
    age?: MangaAge;
    page?: number;
}
export default class Mangakakalot {
    private options;
    constructor(options?: ScrapingOptions);
    /**
     * Get a list of manga that match the title. Unfortunately, Mangakakalot does not offer an advanced search, so this can only search manga titles only. I will be updating this if Mangakakalot introduces a better search system. This method also requires you to have at least **3 characters** minimum.
     *
     * @param keyword - Title of manga (e.g "Black Clover", "One Piece", "Naruto")
     * @param callback - Callback function
     * @returns List of Manga that match `title`
     * @example
     * ```typescript
     * import { Mangakakalot } from '@specify_/mangascraper';
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const mangas = await mangakakalot.search("pokemon")
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [ { title: 'Pokemon: The World Champion Season', url: 'https://mangakakalot.com/manga/zv925092' ... }]
     * ```
     */
    search(keyword: string, callback?: MangaCallback<Manga<Mangakakalot>[]>): Promise<Manga<Mangakakalot>[]>;
    /**
     * Gets metadata of manga such as the genre, authors, chapters, etc.
     *
     * @param url - Mangakakalot URL page of the manga
     * @param callback - Callback function
     * @returns Returns metadata of manga (chapters, alternate titles, status, etc.)
     * @example
     * ```js
     * import { Mangakakalot } from "@specify_/mangascraper";
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const meta = await mangakakalot.getMangaMeta('https://mangakakalot.com/read-gj8eg158504836414');
     *  console.log(meta);
     * }
     *
     * test(); // Output: { title: { main: 'Fukushuu...', alt: { jp: [...], en: [...], cn: [], ...} }}
     * ```
     */
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<Mangakakalot>>): Promise<MangaMeta<Mangakakalot>>;
    /**
     * Get a list of manga from mangakakalot
     *
     * @param genre - Mangakakalot Genre
     * @param filters - Filters to apply based on mangakakalot's query system
     * @param callback - Callback function
     * @returns Returns a list of manga from mangakakalot
     * @example
     * ```js
     * import { Mangakakalot } from "@specify_/mangascraper";
     * const mangakakalot = new Mangakakalot();
     *
     * async function test() {
     *  const mangas = await mangakakalot.getMangas({ genre: 'Comedy' });
     *  console.log(mangas);
     * }
     *
     * test(); // Output: [{ title: 'The Provincial...', url: 'https://mangakakalot.com/...', ... }]
     * ```
     */
    getMangasFromGenre(genre?: MangaGenre<Mangakakalot>, filters?: MangaFilters<Mangakakalot>, callback?: MangaCallback<Manga<Mangakakalot, 'alt'>[]>): Promise<Manga<Mangakakalot, 'alt'>[]>;
    /**
     * Get raw image URLs from a chapter URL. Since mangakakalot uses cloudfare, make sure
     * to attach `referer: https://mangakakalot.com/` to the request headers when fetching images
     * or else the images will not load.
     *
     * @param url - URL of chapter
     * @param callback - Callback function
     * @returns Returns raw image URLs of the chapter.
     * @example
     * ```jsx
     * // React-native example
     * <Image source={{
     *    uri: 'https://s8.mkklcdnv6temp.com/mangakakalot/y1/yk923891/chapter_38/1.jpg',
     *    method: 'GET',
     *    headers: {
     *        referer: 'https://mangakakalot.com/'
     *        }
     *    }}
     * />
     * ```
     */
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
//# sourceMappingURL=index.d.ts.map