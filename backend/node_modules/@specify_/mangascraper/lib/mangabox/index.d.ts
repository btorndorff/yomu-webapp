import { Manga, MangaBoxGenres, MangaCallback, MangaChapters, MangaFilters, MangaGenre, MangaMeta, MangaOrder, MangaRating, MangaSearch, MangaStatus, ScrapingOptions } from '..';
export declare type MangaBoxGenre = keyof typeof MangaBoxGenres;
export interface MangaBoxMeta {
    title: {
        main: string;
        alt: string[];
    };
    authors: string[];
    artists: string[];
    genres: MangaGenre<MangaBox>[];
    status: MangaStatus<MangaBox>;
    rating: MangaRating;
    coverImage: string;
    summary: string;
    chapters: MangaChapters<MangaBox>[];
    rank: string;
}
export interface MangaBoxManga {
    title: string;
    url: string;
    genres: MangaBoxGenre[];
    coverImage: string;
    authors: string[];
    status: MangaStatus<MangaBox>;
    updatedAt: Date;
}
export interface MangaBoxOptions {
    genres?: {
        include?: MangaBoxGenre[];
        condition?: 'or' | 'and';
    };
    yearReleased?: number;
    includeNSFW?: boolean;
    status?: MangaStatus<MangaBox>[] | 'any' | MangaStatus<MangaBox>;
    orderBy?: MangaOrder<MangaBox>;
}
declare class MangaBox {
    private options;
    private BLOCKED_DOMAINS;
    constructor(options?: ScrapingOptions);
    /**
     * Search up a manga from MangaBox
     *
     * @param query - Query to provide to MangaBox's search
     * @param filters - Filters to apply in MangaBox's search
     * @param callback - Callback function
     * @returns Returns an array of mangas from MangaBox's search results
     * @example
     *
     * ```js
     * await mangabox.search(null, {
     *    genres: {
     *        include: ['Detective', 'Martial Arts'],
     *        condition: 'or'
     *    },
     *    status: ['completed', 'ongoing'],
     *    orderBy: 'trending'
     * })
     * ```
     */
    search(query?: MangaSearch<MangaBox>, filters?: MangaFilters<MangaBox>, callback?: MangaCallback<Manga<MangaBox>[]>): Promise<Manga<MangaBox>[]>;
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<MangaBox>>): Promise<MangaMeta<MangaBox>>;
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
export default MangaBox;
//# sourceMappingURL=index.d.ts.map