"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const automateBrowser_1 = __importDefault(require("../functions/automateBrowser"));
const failure_1 = __importDefault(require("../functions/failure"));
const success_1 = __importDefault(require("../functions/success"));
const readHtml_1 = __importDefault(require("../functions/readHtml"));
class ReadMng {
    constructor(options = {}) {
        this.options = options;
    }
    /**
     * Get a list of mangas from [readmng](https://www.readmng.com/).
     *
     * @param query - Title, author, or artist. Accepts a `string` by default, but if you want to include an `author`, `artist`, and/or `title`, it must be an object containing those fields.
     * @param filters - Filters you want to apply to query. Do note that Readmng's search can be unreliable sometimes. The manga order is locked by most views since this is readmng's search limitation.
     * @param callback - Callback function
     * @returns Returns at most 50 mangas from [readmng](https://www.readmng.com/).
     * @example
     * ```js
     * await readmng.search();
     * ```
     * ```js
     * await readmng.search({ title: 'The Gamer' });
     * ```
     * ```js
     * await readmng.search(null, { genres: { include: ['Fantasy', 'Seinen'] }});
     * ```
     */
    search(query = '', filters = {}, callback = () => void 0) {
        var _a, _b, _c, _d;
        if (query == null)
            query = '';
        if (filters == null)
            filters = {};
        const { genres, status = 'any', type = 'any' } = filters;
        const genresIncludeCnt = (_b = (_a = genres === null || genres === void 0 ? void 0 : genres.include) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
        const genresExcludeCnt = (_d = (_c = genres === null || genres === void 0 ? void 0 : genres.exclude) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
        const mangaInput = (() => {
            if (typeof query === 'string')
                return query;
            if ('title' in query && query.title)
                return query.title;
            return '';
        })();
        const authorInput = query && typeof query === 'object' && query.author ? query.author : '';
        const artistInput = query && typeof query === 'object' && query.artist ? query.artist : '';
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = (yield automateBrowser_1.default(this.options, (page) => __awaiter(this, void 0, void 0, function* () {
                    yield page.goto('https://www.readmng.com/advanced-search', { waitUntil: 'domcontentloaded' });
                    yield page.addScriptTag({ path: require.resolve('jquery') });
                    yield page.waitForSelector('input[name="manga-name"], input[name="author-name"], input[name="artist-name"], button[type="submit"].btn.btn-danger');
                    yield page.$eval('input[name="manga-name"]', (element, mangaInput) => (element.value = mangaInput), mangaInput);
                    yield page.$eval('input[name="author-name"]', (element, authorInput) => (element.value = authorInput), authorInput);
                    yield page.$eval('input[name="artist-name"]', (element, artistInput) => (element.value = artistInput), artistInput);
                    if (genres) {
                        if (genres.include)
                            for (let i = 0; i < genresIncludeCnt; i++) {
                                yield page.$eval(`span[data-id="${__1.ReadMngGenres[genres.include[i]]}"]`, (element) => element.click());
                            }
                        if (genres.exclude)
                            for (let i = 0; i < genresExcludeCnt; i++) {
                                yield page.$eval(`span[data-id="${__1.ReadMngGenres[genres.exclude[i]]}"]`, (element) => {
                                    element.click();
                                    element.click();
                                });
                            }
                    }
                    switch (type) {
                        case 'any':
                        default:
                            break;
                        case 'manga':
                            yield page.$eval('input[name="type"][value="japanese"]', (element) => element.click());
                            break;
                        case 'manhua':
                            yield page.$eval('input[name="type"][value="chinese"]', (element) => element.click());
                            break;
                        case 'manhwa':
                            yield page.$eval('input[name="type"][value="korean"]', (element) => element.click());
                            break;
                    }
                    switch (status) {
                        case 'any':
                        default:
                            break;
                        case 'ongoing':
                            yield page.$eval('input[name="status"][value="ongoing"]', (element) => element.click());
                            break;
                        case 'completed':
                            yield page.$eval('input[name="status"][value="completed"]', (element) => element.click());
                            break;
                    }
                    yield page.$eval('button[type="submit"].btn.btn-danger', (element) => element.click());
                    yield page.waitForSelector('h2 > a[title], div.alert.alert-warning');
                    return yield page.evaluate(() => {
                        const { $ } = window;
                        if ($('div.alert.alert-warning').get().length === 1)
                            return [];
                        const titles = $('h2 > a[title]')
                            .map((_, el) => {
                            const anchorEl = $(el);
                            const title = anchorEl.text();
                            const url = anchorEl.attr('href') || '';
                            return {
                                title,
                                url,
                            };
                        })
                            .get();
                        const coverImages = $('div.left > a > img')
                            .map((_, el) => { var _a; return (_a = $(el).attr('src')) !== null && _a !== void 0 ? _a : ''; })
                            .get();
                        const genres = $('div.right > dl > dd:has("a")')
                            .map((_, el) => {
                            const ddEl = $(el);
                            return [
                                ddEl
                                    .children()
                                    .map((_, el) => {
                                    const anchorEl = $(el);
                                    const genre = anchorEl.text().trim();
                                    return genre;
                                })
                                    .get(),
                            ];
                        })
                            .get();
                        const dlContainer = $('div.right > dl > dt:contains("Status:")');
                        const statuses = dlContainer
                            .map((_, el) => {
                            const ddEl = $(el);
                            const status = ddEl.siblings('dd:eq(0)').text().trim().toLowerCase();
                            return status === '-' ? null : status;
                        })
                            .get();
                        const types = dlContainer
                            .map((_, el) => {
                            const ddEl = $(el);
                            const type = ddEl.siblings('dd:eq(2)').text();
                            switch (type) {
                                case 'Chinese':
                                    return 'manhua';
                                case 'Korean':
                                    return 'manhwa';
                                case 'Japanese':
                                    return 'manga';
                            }
                        })
                            .get();
                        const views = dlContainer
                            .map((_, el) => {
                            const ddEl = $(el);
                            const views = ddEl.siblings('dd:eq(3)').text();
                            return views;
                        })
                            .get();
                        const ratings = $('div.meta > ul')
                            .map((_, el) => {
                            const ulEl = $(el);
                            const smileyCt = Number(ulEl.children('li:eq(0)').text());
                            const sadCt = Number(ulEl.children('li:eq(2)').text());
                            const voteCountNum = sadCt + smileyCt;
                            const voteCount = voteCountNum.toLocaleString();
                            const rating_percentage = voteCountNum > 0 && sadCt < smileyCt
                                ? `${((smileyCt / voteCountNum) * 100).toFixed(2)}%`
                                : undefined;
                            const rating_stars = voteCountNum > 0 && sadCt < smileyCt
                                ? `${(Number(Number(rating_percentage === null || rating_percentage === void 0 ? void 0 : rating_percentage.slice(0, -1)) / 10) / 2).toFixed(1)} / 5`
                                : undefined;
                            return {
                                sourceRating: 'readMng.com',
                                voteCount,
                                rating_percentage,
                                rating_stars,
                            };
                        })
                            .get();
                        return titles.map(({ title, url }, i) => ({
                            title,
                            url,
                            coverImage: coverImages[i],
                            genres: genres[i],
                            type: types[i],
                            status: statuses[i],
                            views: views[i],
                            rating: ratings[i],
                        }));
                    });
                }), { resource: { method: 'unblock', type: ['document', 'script', 'xhr'] } }));
                success_1.default(data, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get the metadata of a manga
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns the metadata of a manga
     */
    getMangaMeta(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Missing argument "url" is required', callback, rej);
            try {
                const $ = yield readHtml_1.default(url, this.options);
                const title = $('h1').text();
                const dlEl = $('dl.dl-horizontal');
                const altTitles = dlEl.children('dd:eq(0)').text().split(', ');
                const status = (() => {
                    const text = dlEl.children('dd:eq(1)').text().toLowerCase();
                    if (text === '-')
                        return undefined;
                    return text;
                })();
                const genres = dlEl
                    .children('dd:eq(2)')
                    .children('a')
                    .map((_, el) => $(el).attr('title'))
                    .get();
                const type = (() => {
                    switch (dlEl.children('dd:eq(3)').text()) {
                        case 'Japanese':
                        default:
                            return 'manga';
                        case 'Korean':
                            return 'manhwa';
                        case 'Chinese':
                            return 'manhua';
                    }
                })();
                const views = dlEl.children('dd:eq(4)').text();
                const summary = $('li.movie-detail').text().trim();
                const author = $('li:contains("Author")').siblings('li').children('a').text();
                const artist = $('li:contains("Artist")').siblings('li').children('a').text();
                const ulEl = $('div.rm_rating > ul');
                const likeCnt = Number(ulEl.children('li:eq(0)').text().trim());
                const dislikeCnt = Number(ulEl.children('li:eq(2)').text().trim());
                const rating = (() => {
                    const voteCountNum = dislikeCnt + likeCnt;
                    const voteCount = voteCountNum.toLocaleString();
                    const ratingPercentage = voteCountNum > 0 && dislikeCnt < likeCnt ? `${((likeCnt / voteCountNum) * 100).toFixed(2)}%` : undefined;
                    const ratingStars = voteCountNum > 0 && dislikeCnt < likeCnt
                        ? `${(Number(Number(ratingPercentage === null || ratingPercentage === void 0 ? void 0 : ratingPercentage.slice(0, -1)) / 10) / 2).toFixed(1)} / 5`
                        : undefined;
                    return {
                        sourceRating: 'readMng.com',
                        voteCount,
                        ratingPercentage,
                        ratingStars,
                    };
                })();
                const chapters = $('ul.chp_lst > li > a')
                    .map((_, el) => {
                    const anchorEl = $(el);
                    const url = `${anchorEl.attr('href')}/all-pages`;
                    const uploadWhen = anchorEl.children('span.dte').text().trim().toLowerCase();
                    const name = anchorEl.children('span.val').children().remove().end().text().trim();
                    return {
                        name,
                        url,
                        uploadWhen,
                    };
                })
                    .get();
                const coverImage = (() => { var _a; return (_a = $('div.col-md-3 > img').attr('src')) !== null && _a !== void 0 ? _a : ''; })();
                success_1.default({
                    title: {
                        main: title,
                        alt: altTitles,
                    },
                    coverImage,
                    author,
                    artist,
                    genres,
                    status,
                    summary,
                    views,
                    rating,
                    type,
                    chapters,
                }, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
    /**
     * Get pages in the form of image urls from a manga chapter
     *
     * @param url - URL of manga chapter
     * @param callback - Callback function
     * @returns Returns an array of img urls from the manga chapter.
     */
    getPages(url, callback = () => void 0) {
        return new Promise((res, rej) => __awaiter(this, void 0, void 0, function* () {
            if (url == null)
                return failure_1.default('Missing argument "url" is required', callback, rej);
            try {
                const $ = yield readHtml_1.default(url, this.options);
                const pages = $('div.page_chapter > img')
                    .map((_, el) => $(el).attr('src'))
                    .get();
                success_1.default(pages, callback, res);
            }
            catch (e) {
                failure_1.default(e, callback, rej);
            }
        }));
    }
}
exports.default = ReadMng;
//# sourceMappingURL=index.js.map