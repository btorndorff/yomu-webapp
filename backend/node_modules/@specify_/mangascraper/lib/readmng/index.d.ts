import { Manga, MangaCallback, MangaChapters, MangaFilters, MangaGenre, MangaMeta, MangaRating, MangaSearch, MangaStatus, MangaType, ReadMngGenres, ScrapingOptions } from '..';
export declare type ReadMngGenre = keyof typeof ReadMngGenres;
export interface ReadMngMeta {
    title: {
        main: string;
        alt: string[];
    };
    genres: MangaGenre<ReadMng>[];
    coverImage: string;
    type: 'manga' | 'manhua' | 'manhwa';
    views: string;
    status?: 'ongoing' | 'completed';
    summary: string;
    author: string;
    artist?: string;
    rating: MangaRating;
    chapters: MangaChapters<ReadMng>[];
}
export interface ReadMngOptions {
    genres?: {
        include?: MangaGenre<ReadMng>[];
        exclude?: MangaGenre<ReadMng>[];
    };
    status?: MangaStatus<ReadMng> | 'any';
    type?: MangaType<ReadMng> | 'any';
}
export interface ReadMngManga {
    title: string;
    url: string;
    coverImage: string;
    genres: MangaGenre<ReadMng>[];
    type: 'manhwa' | 'manhua' | 'manga';
    views: string;
    status?: 'ongoing' | 'completed';
    rating: MangaRating;
}
export default class ReadMng {
    private options;
    constructor(options?: ScrapingOptions);
    /**
     * Get a list of mangas from [readmng](https://www.readmng.com/).
     *
     * @param query - Title, author, or artist. Accepts a `string` by default, but if you want to include an `author`, `artist`, and/or `title`, it must be an object containing those fields.
     * @param filters - Filters you want to apply to query. Do note that Readmng's search can be unreliable sometimes. The manga order is locked by most views since this is readmng's search limitation.
     * @param callback - Callback function
     * @returns Returns at most 50 mangas from [readmng](https://www.readmng.com/).
     * @example
     * ```js
     * await readmng.search();
     * ```
     * ```js
     * await readmng.search({ title: 'The Gamer' });
     * ```
     * ```js
     * await readmng.search(null, { genres: { include: ['Fantasy', 'Seinen'] }});
     * ```
     */
    search(query?: MangaSearch<ReadMng>, filters?: MangaFilters<ReadMng>, callback?: MangaCallback<Manga<ReadMng>[]>): Promise<Manga<ReadMng>[]>;
    /**
     * Get the metadata of a manga
     *
     * @param url - URL of manga
     * @param callback - Callback function
     * @returns Returns the metadata of a manga
     */
    getMangaMeta(url: string, callback?: MangaCallback<MangaMeta<ReadMng>>): Promise<MangaMeta<ReadMng>>;
    /**
     * Get pages in the form of image urls from a manga chapter
     *
     * @param url - URL of manga chapter
     * @param callback - Callback function
     * @returns Returns an array of img urls from the manga chapter.
     */
    getPages(url: string, callback?: MangaCallback<string[]>): Promise<string[]>;
}
//# sourceMappingURL=index.d.ts.map